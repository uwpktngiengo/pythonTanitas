-Vannak online Python környezetek, amikben lehet Python kódot próbálgatni, futtatni. Például: https://www.programiz.com/python-programming/online-compiler/    vagy a w3schools.
-De, nyilván a legjobb, ha a saját gépedre telepítesz Python futtatókörnyezetet (interpretert), és azon dolgozol.
-Tanulj meg angolul, és angolul keress a Google-ben és a Stackoverflow.com-on. Ha elakadsz a programozással (minden programozó "elakad" kb. 10-30-100 percenként), akkor a stackoverflow-n megtalálod a megoldást, de csak angolul.
-Programozást tanulni csak úgy lehet, ha programkódot írsz, próbálgatsz, apró módosításokat hajtasz végre a kódon és mindig kipróbálod, hogy mi változik. Írj sok-sok kódot, és próbálgasd! Enélkül nem fog menni. Ha csak a könyvet / pdf-et / feladatokat olvasod, vagy kódot olvasol, az jó, de nem elég, neked magadnak is kell kódot írnod, néha fejből is, guglis keresés nélkül is. Próbálkozni kell.
-Vannak fordított nyelvek (pl. C, C++) és vannak interpretált scriptnyelvek (pl. JavaScript, Python, bash, awk, perl). A Python kódot egy interpreter hajtja végre. Az interpreter egy program, és ez bemenetként, szövegfájlként beolvassa az általad írt kódot (pl. izébizé.py), és ami ebben van, azt végrehajtja. Az interpretált scriptnyelvek hátránya, hogy általában lassabban fut az így megírt kód, mintha fordított nyelven lett volna megírva (pl. C++-ban), illetve az is egy hátrány, hogy futtatás előtt nincs átnézve az egész kód (mint pl. a fordított nyelvek esetében a fordítás során), így előfordulhat olyan, hogy csak akkor derül ki egy hiba, ha az a kódrészlet kerül végrehajtásra, és ha ez csak ritkán történik meg, akkor a hiba rejtve maradhat sokáig.
-A Python nyelv egyik különlegessége, hogy az indentálásnak nyelvtani jelentősége van (ez a legtöbb nyelvnél nincs így, pl. a Java, C#, C, C++, JavaScript, stb. mind figyelmen kívül hagyják az indentálást, ennek nincs nyelvtani funkciója, csupán az emberi programozók számára teszik lehetővé a könnyebb olvashatóságot). Ezzel a Python készítői azt akarták elérni, hogy rákényszerítsék a programozókat a szépen kinéző (szépen indentált) kód készítésére. Python-ban lehet 2 db space-szel, 4 db space-szel, TAB-bal, stb. indentálni, csak legyen következetes. Én a példakódokban 2 db space-t használtam. Vallási / politikai meggyőződés :-) kérdése, hogy ki hogyan indentál, ki szereti az X darab space-t, ki gyűlöli a TAB-ot, stb.
-Én most Windows-t használok, a C:/Python32/python.exe elérési úton van az én gépemen a Python interpreter program, és szégyen szemre nem raktam be a path-ba a python-t, így mindig a teljes elérési útját be kell írnom az interpreternek (vagy a fölfele nyíllal a parancssorban használom a legutóbbi parancsot). Egy mappába raktam a kódot (mondjuk program.py), ha ebből a mappából nyitok egy parancssort (shift + jobb egérgomb -> parancsablak nyitása itt), akkor így tudom futtatni a programot: C:/Python32/python.exe akarmilyen_program.py, majd enter. Ha nem adok meg teljes elérési utat, akkor ebből a mappából tudok olvasni fájlokat, és írni fájlokba. Ha a programkódban teljes elérési utakat adok meg, akkor bárhonnan olvashatok fájlokat, és bárhová írhatok fájlokat (pl. pendrive, külső HDD, hálózati felcsatolt meghajtó, stb.).
-osztály és objektum (class, object) fogalmai
-Python2, Python3 (én Python3-at használtam)
-nem objektumorientált kód (csak függvények vannak, osztályok/objektumok nem)
-OOP - objektumorientált kód (osztályok és objektumok is vannak)
-kód szétszedése több külön fájlra (én egyetlen fájlba tettem mindent, mivel 10-20 soros egyszerű kis példaprogramokról van szó)
-underscore_tipusu_elnevezesek vs. camelCase -> következetesen illene használni csak az egyiket, én kevertem, mert a feladat szövegében is összevisszaság volt, de ez az elején tökmindegy :-)
-programkódban a kommenteket, változókat, stb. illene 100%-ban angolul írni, én kevertem a magyar/angol/német nyelveket egy kicsit, de ez egy egyetemi 10 soros programkódban tökmindegy, itt a programozás megtanulása a fontos
-osztályban public VS. private adattagok jelentése, elmagyarázása, mi az értelme ezeknek, mire/hogyan lehet használni
-egyik osztály öröklődik a másik osztályból -> ennek az elméleti hátterének elmagyarázása, mi az értelme ennek, miért használunk ilyesmit, mire lehet használni